{"version":3,"file":"static/js/981.168e7071.chunk.js","mappings":"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","sources":["js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/core/base.js","js/opener.js","js/slide/loader.js","js/photoswipe.js","js/slide/get-thumb-bounds.js"],"sourcesContent":["/** @typedef {import(\"../photoswipe\").Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import(\"./slide\").default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n/** @typedef {import(\"./gestures\").default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n/** @typedef {import(\"./gestures\").default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import(\"../types\").AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import(\"./gestures\").default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"./slide/slide\").default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import(\"./types\").Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import(\"./animations\").AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import(\"./animations\").AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import(\"../types\").Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import(\"./ui-element\").UIElementData} UIElementData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"./ui-element\").UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import(\"../lightbox/lightbox\").default} PhotoSwipeLightbox */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../photoswipe\").DataSource} DataSource */\r\n/** @typedef {import(\"../ui/ui-element\").UIElementData} UIElementData */\r\n/** @typedef {import(\"../slide/content\").default} ContentDefault */\r\n/** @typedef {import(\"../slide/slide\").default} Slide */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../slide/zoom-level\").default} ZoomLevel */\r\n/** @typedef {import(\"../slide/get-thumb-bounds\").Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import(\"./slide\").default} Slide */\r\n/** @typedef {import(\"./slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../util/util\").LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import Eventable from './eventable';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"./slide/get-thumb-bounds\").Bounds} Bounds */\r\n/** @typedef {import(\"./util/animations\").AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import(\"./content\").default} Content */\r\n/** @typedef {import(\"./slide\").default} Slide */\r\n/** @typedef {import(\"./slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../lightbox/lightbox\").default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import(\"./types\").Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import(\"./slide/slide\").SlideData} SlideData */\r\n/** @typedef {import(\"./slide/zoom-level\").ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import(\"./ui/ui-element\").UIElementData} UIElementData */\r\n/** @typedef {import(\"./main-scroll\").ItemHolder} ItemHolder */\r\n/** @typedef {import(\"./core/eventable\").PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import(\"./core/eventable\").PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import(\"./core/eventable\").EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import(\"./core/eventable\").AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","/** @typedef {import(\"./slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","this","_pool","target","type","listener","passive","_toggleListener","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","_updateAxis","dispatch","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","Number","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","holderElement","calculateSize","transformOrigin","load","appendHeavy","updateContentSize","innerHTML","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","navigator","maxTouchPoints","drag","tapHandler","on","events","add","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","change","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","doubleTap","setTimeout","tap","click","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","resize","_currPositionIndex","_prevPositionIndex","i","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","setIsActive","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_firstFrameTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","_raf","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","secondaryIsHigher","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","priority","f1","f2","addFilter","removeFilter","args","apply","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","instance","isAttached","state","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","imageElement","srcset","complete","onLoaded","onload","onerror","onError","displayError","isError","image","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","errorMsg","removePlaceholder","isDecoding","decode","then","appendImage","catch","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","getPlaceholderElement","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","img","decoded","isDelaying","reject","finally","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","lazyLoadSlide","getItemData","createContentFromData","lazyLoad","zoomLevel","ceil","lazyLoadData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","addToCache","setSlide","removeByIndex","indexToRemove","item","find","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","open","goTo","removeAll","listeners","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}